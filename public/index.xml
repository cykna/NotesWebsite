<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/big-o-notation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/big-o-notation/</guid>
      <description>&lt;p&gt;Big O Notation is the way people use to talk about the growing of some algorithm. This can be used on performance, memory usage and others, even though talking about these we require more than simply Big O. When working with Big O, we will work actually with a rule that can be applied to a code to measure it, but it doesn&amp;rsquo;t mean that code will always be run slowly or fast. Actually, an optimized code can run slowly if the machine running it isn&amp;rsquo;t fast enough, while, a non-optimized code can run it with not so much problems if the machine running it is fast enough for so.&#xA;In reality what big o will do estimate how much a code will need to finish based on an input I, or grow in terms of memory. Here it&amp;rsquo;s being talked mainly about the amount of instructions to finish some algorithm.&#xA;For measuring so we use the &amp;lsquo;O&amp;rsquo; notation. To things don&amp;rsquo;t keep too theoretical, let&amp;rsquo;s suppose the following code:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/memoization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/memoization/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/recursion/</guid>
      <description>&lt;p&gt;Recursion is occurs when a something uses itself on its definition, for example, with mathematical functions:&#xA;$f(x) = 1 + f(x-1)$&#xA;This function f, on it&amp;rsquo;s definition, calls itself, then, it&amp;rsquo;s considered a recursive function. That can be written in it&amp;rsquo;s code format with the following:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(n:&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But recursion can appear in other situations than simply function calls, for example, let&amp;rsquo;s say the following rule:&#xA;$$0 \in N$$ $$\forall n \in N, n+1 \in N$$&#xA;Then, this rule is recursive as well, because it uses itself to determine that $n \in N$ .&#xA;Going back to programming, one kind of data structure that is recursive are [[LinkedList|linked lists]] and [[Trees|trees]], for example:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/stackframe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/stackframe/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/treetraversal/breadthfirst/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/treetraversal/breadthfirst/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/treetraversal/depthfirst/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/treetraversal/depthfirst/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/treetraversal/inorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/treetraversal/inorder/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/treetraversal/posorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/treetraversal/posorder/</guid>
      <description>&lt;p&gt;PosOrder is practically the opposite of [[PreOrder]] when working with trees. [[PreOrder]] defines that something will happen with the children first, then, it will happen with the parent. PosOrder is the opposite, it happens with the parent first, and then the children. One example is an [[UI]] that is defined as a Tree, which isn&amp;rsquo;t unusual. When rendering so, we cannot render the children before the parents, which would be categorized as PreOrder, instead, we MUST, draw first the parents and going deeper on the children, then, the children will appear on top of the parents. This can be reached by the following code:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/algorithms/treetraversal/preorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/algorithms/treetraversal/preorder/</guid>
      <description>&lt;p&gt;When working with trees, at some times we want to traverse it and work with the children before the parent, that method is called &amp;lsquo;PreOrder&amp;rsquo;. For example, on making my UI library, I had to write a way to know which element I was clicking at, for so, it was required the usage of PreOrder.&#xA;Since the children are drawn after the parent, they&amp;rsquo;re &amp;lsquo;closer&amp;rsquo; to the screen, so it makes sense for them to be checked, then, i should check for it&amp;rsquo;s parent after checking for them, which then, configures as a PreOrder traverse.&#xA;This can be understood better at the [[GenericTree]]. Supposing we traverse that tree using [[PosOrder]], and we print the numbers, the result would be something like &lt;code&gt;1,2,3,4,5,6,7,8,9,10&lt;/code&gt;, thus, we are looking for the parent then for the children, but with our case its quite the opposite, in case we wanted &lt;code&gt;10,9,8,7,6,5,4,3,2,1&lt;/code&gt;which will look for the children first.&#xA;Leaving the theory, a practical code using [[Recursion]] I made is the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/basis/bytes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/basis/bytes/</guid>
      <description>&lt;p&gt;When starting to work with computers, we must understand how data is structured.&#xA;The way data is structured is called bytes. It&amp;rsquo;s a sequence of 8 bits. Where a bit is actually named as &amp;lsquo;binary digit&amp;rsquo;. The value of a bit is either 0 or 1, on the physics, it&amp;rsquo;s when a transistor is &amp;lsquo;activated&amp;rsquo;, if so, it&amp;rsquo;s 1, if not is 0. The group of 8 bits is called a byte.&#xA;In programming, in reality everything is an abstraction to what a byte is. For example, [[Instruction|instructions]] are simply bytes that a processor understands and based on so executes some instruction. [[String|strings]] are in fact an [[Array|array]] of bytes where each byte represents a char, or, depending of the [[Encoding]] of so, a group of bytes represent a char. Same thing for numbers. When working with [[Int|int]] in C for example, the &amp;lsquo;int&amp;rsquo; type is actually a &amp;lsquo;4 byte signed integer&amp;rsquo;.&#xA;A [[Pointer|pointer]] is in 64 bit architecture, 8 bytes, and in 32 bit architecture 4 bytes, the same size as an [[usize]]. [[Objects|Objects]], supposing [[OOP]] are just pointers to the [[Heap]] that actually contain the information about the object, which is a contiguous byte array that interprets the bytes in a order.&#xA;The primitives, in case, the types that are more close to bytes than any others are numbers. The reason is very simple actually: they&amp;rsquo;re simple bytes that are interpreted a way we can understand.&#xA;When we print a number on the console for example, let&amp;rsquo;s say we get &amp;lsquo;5&amp;rsquo;, actually what happened is that the bits of the number are 101 and we converted it to it&amp;rsquo;s [[Ascii|ascii]] equivalent. Simple as that.&#xA;In programming we have a lot of types of numbers. In languages like [[Javascript]] or [[Python]] or other high level ones we generally use a single type for everything. In rust for example we got i8, i16, i32, i64, i128 which are signed integers followed by the amount of bits each use. The same logic for &amp;lsquo;u&amp;rsquo; variants: u8, u16, u32, u64, u128. Rust follows IEEE-752 for implementing floats, or decimal values, and it contains f32 and f64, equivalents to &amp;lsquo;float&amp;rsquo; and &amp;lsquo;double&amp;rsquo; in C. Actually, the only type that Javascript supports is f64 if not using typed arrays.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/basis/pointer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/basis/pointer/</guid>
      <description>&lt;p&gt;When working with variables, we must understand first of all what is a variable. In the RAM, we got an space of, lets say for example 8 GB, this means we have a capacity to store about 8 Billions bytes, but, what would &amp;lsquo;storing bytes&amp;rsquo; mean? In case the ram is such as a list, when we create a variable, what we are doing is getting some free position on the ram and simply using them for that variable. Let&amp;rsquo;s say the following C code:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/basis/slice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/basis/slice/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/concepts/ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/concepts/ui/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/concurrency/distributedlocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/concurrency/distributedlocks/</guid>
      <description>&lt;p&gt;When we talk about Distributed Locks, we are mainly talking about distributed systems, before commenting on distributed Locks, we will talk about distributed systems.&lt;/p&gt;&#xA;&lt;p&gt;A distributed system is a collection of &lt;strong&gt;independent  computers&lt;/strong&gt; (nodes) that work together and appear to the user as a single coherent system. Key characteristics:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Network Communication: nodes exchanges messages (they don&amp;rsquo;t share memory directly)&lt;/li&gt;&#xA;&lt;li&gt;Concurrency: multiple machines can execute tasks simultaneously&lt;/li&gt;&#xA;&lt;li&gt;Partial failures: one machine can fail while others keep running (different from centralized systems).&lt;/li&gt;&#xA;&lt;li&gt;Consistency and coordination: since data may be spread across nodes, the system must handle synchronization, consensus, and fault tolerante(e.g., Paxos or Raft algorithms)&lt;/li&gt;&#xA;&lt;li&gt;Examples: distributes databases(Cassandra, MongoDb Cluster), distributed file systems (HDFS), coordination services (Zookeeper, Etcd), and cloud plataforms (AWS, Google Cloud)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In short:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/datastructures/linkedlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/datastructures/linkedlist/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/datastructures/slotmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/datastructures/slotmap/</guid>
      <description>&lt;p&gt;When building a tree, if trying to make it Vector based, one of the problems it will have is that the deletion at some index I is not O(1), instead O(N), that does happen because when the data is deleted, a gap originates, but, the must vector to be contiguous and able to accessed via indices correctly, so the content to the right of I($\forall  N \text{ where } I &amp;lt; N &amp;lt; Len$) ,  needs to be moved to the left, then, the cost to make so is defined as O(N). The reasons why this can be understood on [[Big O Notation]]&#xA;Based on that, if I have a tree that is vector based, the time for deletion will be slow as hell, then another kind of data structure must be required, some that makes able to work with deletion and insertion at O(1). We do can work with [[LinkedList|linked lists]] but it would be O(n) to search for elements. Then the solution is a data structure that contains info about a given type T in a contiguous way, when deleting keeps that gap and reuses, and can be fast for finding. Well, that&amp;rsquo;s the case of a Slotmap.&#xA;Slotmaps are just as vectors, but they simply keep the gap of where should be removed and reinsert a new element there instead of in the back or the head of a Vector or a Queue. The core idea can be understood as the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/datastructures/trees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/datastructures/trees/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/datastructures/vector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/datastructures/vector/</guid>
      <description>&lt;p&gt;When working with data, one thing that we might want to do is have a list of elements, independently of the way it&amp;rsquo;s structured, we want to have elements on a list. The first thing we can think of is using an [[Array]] but, if the content size is not known during runtime, we cannot simply store it on a array, since, they got fixed size.&#xA;To manipulate something like this then, we must allocate data during runtime, thus, we think firstly on rely on top of things like [[Heap|heap]] allocation. That&amp;rsquo;s exactly the way Vectors work.&#xA;Vectors are dynamic sized arrays, then, it&amp;rsquo;s correct to assume that they do allocate things on heap, more precisely, they pre-allocate an specific amount of bytes required to start working.&#xA;Let&amp;rsquo;s say the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/datatransfer/batching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/datatransfer/batching/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/datatransfer/streamming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/datatransfer/streamming/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/errors/stackoverflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/errors/stackoverflow/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/excalidraw/generictree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/excalidraw/generictree/</guid>
      <description>&lt;p&gt;==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== You can decompress Drawing data with the command palette: &amp;lsquo;Decompress current Excalidraw file&amp;rsquo;. For more info check in plugin settings under &amp;lsquo;Saving&amp;rsquo;&lt;/p&gt;&#xA;&lt;h1 id=&#34;excalidraw-data&#34;&gt;Excalidraw Data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#excalidraw-data&#34;&gt;#&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;text-elements&#34;&gt;Text Elements&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#text-elements&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;1 ^CtMEtoRV&lt;/p&gt;&#xA;&lt;p&gt;2 ^RoHcsysm&lt;/p&gt;&#xA;&lt;p&gt;3 ^ZvOgwceu&lt;/p&gt;&#xA;&lt;p&gt;4 ^FHXqpytF&lt;/p&gt;&#xA;&lt;p&gt;5 ^gT8WghOZ&lt;/p&gt;&#xA;&lt;p&gt;6 ^CWFRvWbd&lt;/p&gt;&#xA;&lt;p&gt;7 ^cEcvMJVL&lt;/p&gt;&#xA;&lt;p&gt;8 ^K0NVY28b&lt;/p&gt;&#xA;&lt;p&gt;9 ^iFlGuRaz&lt;/p&gt;&#xA;&lt;p&gt;10 ^pTXd8RgT&lt;/p&gt;&#xA;&lt;p&gt;%%&lt;/p&gt;&#xA;&lt;h2 id=&#34;drawing&#34;&gt;Drawing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#drawing&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-compressed-json&#34; data-lang=&#34;compressed-json&#34;&gt;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&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;%%&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/io/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/io/streams/</guid>
      <description>&lt;p&gt;Stream is a way to process data safely and efficiently. It works piece by piece, in chunks. By processing data this way, without loading all data into memory at once, it prevents server overload and improves speed and security.&lt;/p&gt;&#xA;&lt;p&gt;Streams are heavily used for processing binary data, whether it&amp;rsquo;s bytes or strings.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;File Processing: Using the fs library, we can create a stream to process a file meaning to read and write it. This is perfect for handling massive log files, uploads, or downloading large files with high efficiency.&lt;/li&gt;&#xA;&lt;li&gt;Network Communication: Streams are frequently used in network communication (like HTTP, TCP, and WebSockets) to efficiently process data in chunks. In this context, they allow you to process the body of HTTP requests and responses, receive file uploads, return large amounts of data from APIs (JSON, XML), and even WebSocket communication uses data streams.&lt;/li&gt;&#xA;&lt;li&gt;Transform Streams: In this case, data is modified while it&amp;rsquo;s being processed, using a combination of readable and writable streams. Data is transformed from one format to another, typically using a pipe. For example: a program processing a huge application log could implement a Transform Stream to filter the log to only show &amp;ldquo;WARN&amp;rdquo; and &amp;ldquo;ERROR&amp;rdquo; entries.&lt;/li&gt;&#xA;&lt;li&gt;Buffer: When using streams, data doesn&amp;rsquo;t all arrive at once. It comes in chunks. Because of this, each chunk is temporarily stored in a buffer before being processed.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;In summary: Streams allow efficient processing of large amounts of data without overloading memory and improving application performance.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/protocols/matp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/protocols/matp/</guid>
      <description>&lt;p&gt;MATP(short for Minecraft Addons Transfer Protocol) is just a name for a theoretical protocol used to transfer data between addons on minecraft.&#xA;It doesn&amp;rsquo;t exist, then, it&amp;rsquo;s not used, and I did not implement it anywhere(yet). It&amp;rsquo;s only the core idea of what a protocol actually does. This is not focused on be 100% correct, but, as said, to give a core idea of what a protocol does.&#xA;In Minecraft Bedrock, until now(12/aug/25), there is no builtin way to transfer data between the so called &amp;lsquo;addons&amp;rsquo;, that are modifications inside it, the equivalent to mods on Java. So we must think a way to transfer. One thing that is does have, is to send messages to every &amp;lsquo;addon&amp;rsquo;, and each decide how to work with that message. That is called [[https://learn.microsoft.com/en-us/minecraft/creator/scriptapi/minecraft/server/scripteventcommandmessageafterevent?view=minecraft-bedrock-stable|scriptEvent]], the thing is that we need 2 things, an ID, and the content  of the message.&#xA;As the protocol is a bunch of rules the end users must follow to be able to interact, we can define it like the following:&#xA;On the id of the scriptevent, we specify the sender ID, and the target the packet is being sent to. So far, that&amp;rsquo;s all.&#xA;On the message we can simply send the bytes, but we would need some header to tell some information about the message being sent. Let&amp;rsquo;s say we want it to have confirmations about the things, so, when an addon A sends the data to the addon B, the addon B confirms it received. Then, on the header we would define if the type of message is a &amp;lsquo;Request&amp;rsquo;, &amp;lsquo;Response&amp;rsquo;, or &amp;lsquo;Reply&amp;rsquo;.&#xA;When actually writing it, we will face that both the ID and the message of the scriptevent are strings, so, if we send something that contains a [[Null Character|null character]], it will fail and the content will be lost. Then we have to determine a way to send the content in a manner it will not be lost. We can use something like [[Base64|base64]], but it does add too much overhead; After using it the final content gets about 33% larger, so we don&amp;rsquo;t want it. As the target is minecraft addons, which run on JS in a [[https://bellard.org/quickjs/|quickjs]] environment, the strings are understood by default as [[Utf16]], so we can instead of sending bytes, send a packet of 2 bytes. I didn&amp;rsquo;t say, but until where i know, the total limit of chars per message is 2048, so, by sending 1 char as 1 byte, we would send only up to 2kb per message, if instead we compact 2 bytes and compact them into a single char, we could be able to send up to 4kb, so, we could use something like [[Base65536]] to actually do that before transfering the data.&#xA;So our protocol is defined in theory:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/protocols/protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/protocols/protocol/</guid>
      <description>&lt;h2 id=&#34;definition&#34;&gt;Definition&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#definition&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Protocols are ways to determine a default action of some. For example, when working with the internet, there are a lot of protocols that determine how the data will be sent, received, and how to act if something fails; one of them are [[TCP]]. Generally the end-user, nor the programmer write a protocol, or it&amp;rsquo;s specification, but use something that already implements this protocol. In case of TCP as mentioned, the implementation is defined by the Operating System, so the programmer writes a program that uses it from the OS itself.&#xA;Some explanations about how to design some, and exactly what a protocol does, can be found at [[MATP]] where i planned all the core idea of a protocol for minecraft bedrock addons&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/protocols/web/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/protocols/web/http/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/protocols/web/ip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/protocols/web/ip/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/protocols/web/quic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/protocols/web/quic/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/protocols/web/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/protocols/web/tcp/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/protocols/web/udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/protocols/web/udp/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/readme/</guid>
      <description>&lt;p&gt;My Obsidian Notes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reason&#34;&gt;Reason&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reason&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;m reading a book which talks about the web, in case it&amp;rsquo;s James F. Kurose | Keith W. Ross Computer Networking A Top Down Approach. 8th Edition and i&amp;rsquo;m seeing that it will become a must to create notes, so that&amp;rsquo;s the reason.&lt;/p&gt;&#xA;&lt;h2 id=&#34;intention&#34;&gt;Intention&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#intention&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Note everything I know and I learn to make it accessible to others. So, this is supposed to accept contribution of others about anything they want to talk about that involves programming and the one writing it down finds interesting to share with people&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/strings/encodings/base64/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/strings/encodings/base64/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/strings/encodings/base65536/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/strings/encodings/base65536/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/strings/encodings/utf16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/strings/encodings/utf16/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/strings/encodings/utf8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/strings/encodings/utf8/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/strings/null-character/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/strings/null-character/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/clientserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/clientserver/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/dsl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/dsl/</guid>
      <description>&lt;p&gt;Continuing with the [[Nuts-and-Bolts]] about how data is shared between on web, when transferring data from a Computer or from a Cellphone to another one, there are some steps. [[Protocol|Protocols]] just make a way to both Ends to understand that data. For example, a request, in terms of web, is a content sent normally via [[TCP]] using the [[HTTP]] protocol where both Ends will understand. But the way that data is sent on the physical world is a bit different.&#xA;Keeping in mind a request from the web, when made, it&amp;rsquo;s content is transformed to Radio electromagnetic waves, then the router from the [[ISP]] receives it, decode and sends to the [[ISP]] central office via cable, it depends on the way the ISP will make so, but let&amp;rsquo;s now suppose it&amp;rsquo;s with copper cables. This is called then DSL. When working with it, the router will decode the content sent from the device, maybe via [[Wifi]], then depending on the kind of data it&amp;rsquo;s, it will be sent in a determined frequency. When working with talking, because the ISP can be the provider of telephones as well, the data sent will be around 0 to 4khz, when uploading, it will be sent around 4khz to 50khz, and above that, is treated as download content, normally between 50khz to 1mhz&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/isp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/isp/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/lan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/lan/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/nuts-and-bolts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/nuts-and-bolts/</guid>
      <description>&lt;h2 id=&#34;packet-switches-and-communication-links&#34;&gt;Packet-switches and Communication-links&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#packet-switches-and-communication-links&#34;&gt;#&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;On the web, the way for sending bits from one computer to another, are made with packet-switches and communication-links, where, the communication-link is the way the data will be transferred. If the data is being sent via Wifi, then the communication-link is radio-waves. If it&amp;rsquo;s being sent via cables, the cable itself is the communication-link.&#xA;When talking about the packet-switches, understanding what is a packet is crucial, but not too hard. When a content is sent, normally it&amp;rsquo;s not sent fully and once, actually, it is sent [[Streamming|streamed]], thus, each piece of the content sent, is considered a packet. What actually happens is that this little piece will get it&amp;rsquo;s header written by the packet-switch, then, the one that did so, will try to send it to the target computer, but, if the computer is not on the current [[LAN]] then it sends the data again to another packet-switch, that then does the same.&#xA;Some examples of packet-switches are routers, that are defined on the Layer 3 of [[OSI|OSI model]] and Ethernet switches&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/osi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/osi/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/serverclient/client-server-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/serverclient/client-server-introduction/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/serverclient/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/serverclient/client/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/serverclient/server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/serverclient/server/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/serverclient/tcpclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/serverclient/tcpclient/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/serverclient/udpclient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/serverclient/udpclient/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/sockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/sockets/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/notes/web/wifi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/web/wifi/</guid>
      <description></description>
    </item>
  </channel>
</rss>
